---
- name: Run the equivalent of "pacman -Syu" as a separate step
  community.general.pacman:
    update_cache: true
    upgrade: true
  diff: true
- name: Ensure git and github-cli are installed
  community.general.pacman:
    name:
      - openssh
      - git
      - github-cli
      - grep
- name: Check .config/gh/hosts.yml for user
  ansible.builtin.shell: grep '{{ username }}' /home/{{ username }}/.config/gh/hosts.yml
  changed_when: false
  register: grep_result
  ignore_errors: true
- name: Add GitHub authorize user using a token
  become: true
  become_user: '{{ username }}'
  ansible.builtin.shell:
    cmd: "echo {{ github_token }} | gh auth login --git-protocol ssh --with-token --skip-ssh-key"
    executable: /bin/bash
  when: grep_result.rc != 0
- name: Add ssh key
  become: true
  become_user: '{{ username }}'
  ansible.builtin.command: "gh ssh-key add /home/{{ username }}/.ssh/id_ed25519.pub"
  register: ssh_key_add_output
  changed_when: '"already exists" not in ssh_key_add_output.stderr'
- name: Add dotfiles remote and clone it 
  become: true
  become_user: '{{ username }}'
  ansible.builtin.shell:
    chdir: '/home/{{ username }}'
    cmd: 'git init && git remote add origin {{ dotfiles_repo_url }} ; git fetch --all && git reset --hard origin/main'
    executable: /bin/bash
  register: add_result
  changed_when: add_result.rc == 0
  failed_when:
    - add_result.rc != 0
    - add_result.stderr | default('') is not search("remote .* already exists")
- name: Find all files in '/home/{{ username }}/.config/scripts'
  find:
    paths: '/home/{{ username }}/.config/scripts'
  register: find
- name: Create symlinks to /usr/local/bin
  become: True
  file:
    src: "{{ item.path }}"
    path: "/usr/local/bin/{{ item.path | basename }}"
    state: link
  with_items: "{{ find.files }}"
- name: Install pacman packages from pkglist.txt
  become: true
  ansible.builtin.shell:
    cmd: 'pacman -S --needed $(comm -12 <(pacman -Slq | sort) <(sort /home/{{ username }}/.config/pkglist.txt))'
    executable: /bin/bash
  register: result
  changed_when: result.rc == 0
  failed_when:
    - result.rc != 0
  diff: true
- name: Delete orphan packages
  become: true
  ansible.builtin.shell:
    cmd: 'pacman -Qqd | pacman --noconfirm -Rsu -'
  ignore_errors: true
- name: Make pkglist.txt
  become: true
  ansible.builtin.shell:
    cmd: 'pacman -Qqe > /home/{{ username }}/.config/pkglist.txt'
    executable: /bin/bash
  register: result
  changed_when: result.rc == 0
  failed_when:
    - result.rc != 0
- name: Ensure flatpak is installed
  community.general.pacman:
    name: flatpak
    state: present
- name: Update flatpaks
  ansible.builtin.shell:
    cmd: 'flatpak update -y'
    executable: /bin/bash
- name: Install flatpaks
  community.general.flatpak:
    name: '{{ flatpak_list }}'
    state: present
